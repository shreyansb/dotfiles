# --- Shreyans Bhansali ---

export PATH=/usr/local/sbin:/usr/local/bin:$PATH
export PATH=$PATH:~/Dropbox/srbag/bin
export PATH=$PATH:/atom/bin/export
export PATH=$PATH:~/Downloads/android-sdk-macosx/tools
export PYTHONPATH=/usr/local/lib/python2.7/site-packages:$PYTHONPATH
export EDITOR=vim
export ACKRC=".ackrc"

# ---- color settings for ls ----
export TERM='xterm'
txtblk='\033[0;30m'
txtred='\033[31m'
txtgrn='\033[32m'
txtplain='\033[1m'
txtylw='\033[33m'
end='\033[0m'

# --- user's binaries ---
if [ -d ~/bin ]; then
	export PATH=$PATH:~/bin
fi

# --- python virtualenv ---
export PIP_REQUIRE_VIRTUALENV=false
export PIP_RESPECT_VIRTUALENV=true
export WORKON_HOME=~/Envs
source /usr/local/bin/virtualenvwrapper.sh 

# ---- rvm ----

# ---- go ----
export GOPATH=/socratic/golang
export PATH=$PATH:$GOPATH/bin

# ---- postgres.app ----
export PATH="/Applications/Postgres.app/Contents/MacOS/bin:$PATH"

# ---- machine and project specific settings ----
if [ -f ~/.bash_personal_settings ]; then
    source ~/.bash_personal_settings
fi

if [ -f ~/.bash_vespr_settings ]; then
    source ~/.bash_vespr_settings
fi

if [ ! -n "$HOSTNAME_FRIENDLY" ]; then
	export HOSTNAME_FRIENDLY=$HOSTNAME
fi

if which brew > /dev/null; then
	export PATH=/usr/local/bin:$PATH

	if [ -f `brew --prefix`/etc/bash_completion ]; then
		. `brew --prefix`/etc/bash_completion
	fi
fi

# ---- git branch name and status for prompt ----
GIT_PS1_SHOWSTASHSTATE=1

if [ -f /usr/local/git/contrib/completion/git-completion.bash ]; then
	source /usr/local/git/contrib/completion/git-completion.bash
fi
if [ -f /opt/local/etc/bash_completion/git-completion.bash ]; then
	source /opt/local/etc/bash_completion/git-completion.bash
fi

function parse_git {
  branch="$(__git_ps1 "%s")"
  if [[ -z $branch ]]; then
    return
  fi

  status="$(git status 2>/dev/null)"

  if [[ $status =~ "Untracked files" ]]; then
    branch="${txtred}(${branch})${end}"
  elif [[ $status =~ "Changes not staged for commit" ]]; then
    branch="${txtred}(${branch})${end}"
  elif [[ $status =~ "Changes to be committed" ]]; then
    branch="${txtylw}(${branch})${end}"
  elif [[ $status =~ "Your branch is ahead" ]]; then
    branch="${txtylw}(${branch})${end}"
  elif [[ $status =~ "nothing to commit" ]]; then
    branch="${txtplain}(${branch})${end}"
  fi

  echo -e $branch
}

parse_git_dirty() {
  [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo "*"
}
parse_git_branch() {
  git branch 2> /dev/null | sed -e "/^[^*]/d" -e "s/* \(.*\)/(\1$(parse_git_dirty))/"
}

# ---- command prompt ----
# for all directories higher in the tree than the current directory,
# only show the first character of their name
PROMPT_COMMAND="echo -ne \"\033]0;$1 ($USER)\007\""
PS1='[\u \[\e[34m\]\w\[\e[m\] $(parse_git)]\n--> '

# ---- aliases ----

alias aliases="alias -p"	# prints list of all aliases

alias edit_bash="vim ~/.bash_profile"
alias reload_bash="source ~/.bash_profile"

alias ls="ls -G"
alias ll="ls -lG"
alias la="ls -lGa"
alias cd..="cd .."
alias ..="cd .."
alias mkdir="mkdir -p"

alias ackp="ack --type=python"
alias ackj="ack --type=javascript"
alias ackh="ack --type=html"
alias acki="ack -i"
alias ackpylist="ack --nocolor '^\s*(class|def).*:' "

alias pytree="tree | grep -v pyc | grep -v __init__"
alias tree3="tree -L 3"

alias gg="git grep -n --color --heading --break"
alias gup='git pull origin $(git rev-parse --abbrev-ref HEAD) && git fetch'

alias untar="tar -zxvf"
alias pyinstall="sudo python setup.py install"
alias pt="ps -e -o pid,command | grep"

# this one's for you James!
alias vi="vim"

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
